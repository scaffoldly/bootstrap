name: Commit to Master
on:
  push:
    branches:
      - master
jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      # TODO - uses: scaffoldly/terraform-plan-release@v1
      - run: terraform init
      - run: terraform workspace new ${GITHUB_REF##*/} || true
      - run: terraform workspace select ${GITHUB_REF##*/}
      # TODO get/create and decrypt state file
      - run: terraform plan -no-color -out planfile
        id: plan
        env:
          TF_VAR_BOOTSTRAP_GITHUB_TOKEN: ${{ secrets.BOOTSTRAP_GITHUB_TOKEN }}
      - run: echo "::set-env name=NEXT_VERSION::$(cat terraform.tfstate.d/${GITHUB_REF##*/}/terraform.tfstate | jq -r '.version + 1')"
      - run: gpg --batch -c --passphrase "$BOOTSTRAP_GITHUB_TOKEN" planfile
        env:
          BOOTSTRAP_GITHUB_TOKEN: ${{ secrets.BOOTSTRAP_GITHUB_TOKEN }}
      - run: git config user.name "Automated Version Bump"
      - run: git config user.email "gh-action-bump-version@users.noreply.github.com"
      # TODO sync version after release
      - run: echo v${{ env.NEXT_VERSION }} > version.txt
      - run: git commit -a -m "Bump to v${{ env.NEXT_VERSION }}" || true
      - run: git push || true
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEXT_VERSION }}
          release_name: Release v${{ env.NEXT_VERSION }}
          body: |
            ```
            ${{ join(steps.plan.outputs.*, '\n')}}
            ```
          draft: true
          prerelease: false
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: planfile.gpg
          asset_name: planfile.gpg
          asset_content_type: application/octet-stream
